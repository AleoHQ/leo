---
namespace: ParseStatement
expectation: Pass
outputs:
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x) {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: ""
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: ""
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 8
          col_stop: 2
          path: ""
          content: "if (x) {\n     ...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: ""
        content: "if (x) {\n     ...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"Self\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":9,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (Self) {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: ""
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: ""
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 11
          col_stop: 2
          path: ""
          content: "if (Self) {\n     ...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: ""
        content: "if (Self) {\n     ...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x) {\\\"}\"}"
      block:
        statements:
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 2
                    line_stop: 2
                    col_start: 8
                    col_stop: 10
                    path: ""
                    content: return ();
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 10
                path: ""
                content: return ();
        span:
          line_start: 1
          line_stop: 3
          col_start: 8
          col_stop: 2
          path: ""
          content: "if (x) {\n     ...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 3
        col_start: 1
        col_stop: 2
        path: ""
        content: "if (x) {\n     ...\n}"
  - Conditional:
      condition:
        Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x) {} else {}\\\"}\"}"
      block:
        statements: []
        span:
          line_start: 1
          line_stop: 1
          col_start: 8
          col_stop: 10
          path: ""
          content: "if (x) {} else {}"
      next:
        Block:
          statements: []
          span:
            line_start: 1
            line_stop: 1
            col_start: 16
            col_stop: 18
            path: ""
            content: "if (x) {} else {}"
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 18
        path: ""
        content: "if (x) {} else {}"
  - Conditional:
      condition:
        Binary:
          left:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {} else if (x+z) {} else {}\\\"}\"}"
          right:
            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {} else if (x+z) {} else {}\\\"}\"}"
          op: Add
          span:
            line_start: 1
            line_stop: 1
            col_start: 5
            col_stop: 8
            path: ""
            content: "if (x+y) {} else if (x+z) {} else {}"
      block:
        statements: []
        span:
          line_start: 1
          line_stop: 1
          col_start: 10
          col_stop: 12
          path: ""
          content: "if (x+y) {} else if (x+z) {} else {}"
      next:
        Conditional:
          condition:
            Binary:
              left:
                Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":22,\\\"col_stop\\\":23,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {} else if (x+z) {} else {}\\\"}\"}"
              right:
                Identifier: "{\"name\":\"z\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":24,\\\"col_stop\\\":25,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {} else if (x+z) {} else {}\\\"}\"}"
              op: Add
              span:
                line_start: 1
                line_stop: 1
                col_start: 22
                col_stop: 25
                path: ""
                content: "if (x+y) {} else if (x+z) {} else {}"
          block:
            statements: []
            span:
              line_start: 1
              line_stop: 1
              col_start: 27
              col_stop: 29
              path: ""
              content: "if (x+y) {} else if (x+z) {} else {}"
          next:
            Block:
              statements: []
              span:
                line_start: 1
                line_stop: 1
                col_start: 35
                col_stop: 37
                path: ""
                content: "if (x+y) {} else if (x+z) {} else {}"
          span:
            line_start: 1
            line_stop: 1
            col_start: 18
            col_stop: 37
            path: ""
            content: "if (x+y) {} else if (x+z) {} else {}"
      span:
        line_start: 1
        line_stop: 1
        col_start: 1
        col_stop: 37
        path: ""
        content: "if (x+y) {} else if (x+z) {} else {}"
  - Conditional:
      condition:
        Binary:
          left:
            Identifier: "{\"name\":\"x\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":5,\\\"col_stop\\\":6,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {\\\"}\"}"
          right:
            Identifier: "{\"name\":\"y\",\"span\":\"{\\\"line_start\\\":1,\\\"line_stop\\\":1,\\\"col_start\\\":7,\\\"col_stop\\\":8,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"if (x+y) {\\\"}\"}"
          op: Add
          span:
            line_start: 1
            line_stop: 1
            col_start: 5
            col_stop: 8
            path: ""
            content: "if (x+y) {"
      block:
        statements:
          - Expression:
              expression:
                Identifier: "{\"name\":\"expr\",\"span\":\"{\\\"line_start\\\":2,\\\"line_stop\\\":2,\\\"col_start\\\":1,\\\"col_stop\\\":5,\\\"path\\\":\\\"\\\",\\\"content\\\":\\\"expr;\\\"}\"}"
              span:
                line_start: 2
                line_stop: 2
                col_start: 1
                col_stop: 5
                path: ""
                content: expr;
          - Return:
              expression:
                TupleInit:
                  elements: []
                  span:
                    line_start: 3
                    line_stop: 3
                    col_start: 8
                    col_stop: 10
                    path: ""
                    content: return ();
              span:
                line_start: 3
                line_stop: 3
                col_start: 1
                col_stop: 10
                path: ""
                content: return ();
        span:
          line_start: 1
          line_stop: 4
          col_start: 10
          col_stop: 2
          path: ""
          content: "if (x+y) {\n     ...\n     ...\n}"
      next: ~
      span:
        line_start: 1
        line_stop: 4
        col_start: 1
        col_stop: 2
        path: ""
        content: "if (x+y) {\n     ...\n     ...\n}"
