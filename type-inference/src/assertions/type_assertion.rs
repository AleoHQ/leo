// Copyright (C) 2019-2020 Aleo Systems Inc.
// This file is part of the Leo library.

// The Leo library is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// The Leo library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with the Leo library. If not, see <https://www.gnu.org/licenses/>.

use crate::{TypeAssertionError, TypeEquality, TypeMembership, TypeVariablePairs};
use leo_ast::Span;
use leo_symbol_table::{Type, TypeVariable};

use serde::{Deserialize, Serialize};

/// A predicate that evaluates equality between two `Types`s.
#[derive(Clone, Debug, Eq, PartialEq, Serialize, Deserialize)]
pub enum TypeAssertion {
    Equality(TypeEquality),
    Membership(TypeMembership),
}

impl TypeAssertion {
    ///
    /// Returns a `TypeAssertion::Equality` predicate from given left and right `Types`s.
    ///
    pub fn new_equality(left: Type, right: Type, span: &Span) -> Self {
        Self::Equality(TypeEquality::new(left, right, span))
    }

    ///
    /// Returns a `TypeAssertion::Membership` predicate from given and set `Type`s.
    ///
    pub fn new_membership(given: Type, set: Vec<Type>, span: &Span) -> Self {
        Self::Membership(TypeMembership::new(given, set, span))
    }

    ///
    /// Returns one or more `TypeVariablePairs` generated by the given `TypeAssertion`.
    ///
    pub fn pairs(&self) -> Result<TypeVariablePairs, TypeAssertionError> {
        match self {
            TypeAssertion::Equality(equality) => equality.pairs(),
            TypeAssertion::Membership(membership) => Err(TypeAssertionError::membership_pairs(membership)),
        }
    }

    ///
    /// Substitutes the given type for self if self is equal to the type variable.
    ///
    pub fn substitute(&mut self, variable: &TypeVariable, type_: &Type) {
        match self {
            TypeAssertion::Equality(equality) => equality.substitute(variable, type_),
            TypeAssertion::Membership(membership) => membership.substitute(variable, type_),
        }
    }

    ///
    /// Checks if the `TypeAssertion` is satisfied.
    ///
    pub fn evaluate(&self) -> Result<(), TypeAssertionError> {
        match self {
            TypeAssertion::Equality(equality) => equality.evaluate(),
            TypeAssertion::Membership(membership) => membership.evaluate(),
        }
    }
}
